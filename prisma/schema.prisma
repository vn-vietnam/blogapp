// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// blog

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  username     String?   @unique
  password     String?
  bio          String?
  email        String?   @unique
  image        String?
  coverImage   String?
  profileImage String?
  createdAt    DateTime  @default(now())
  hasAdmin     Boolean   @default(false)
  posts        Post[]
  comments     Comment[]
}

model Post {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  content      String
  shortContent String
  timeRead     Int
  public       Boolean?  @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  image1       String?
  image2       String?
  comments     Comment[]
  Type         Type?     @relation(fields: [typeId], references: [id])
  typeId       String?   @db.ObjectId
  Category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   String?   @db.ObjectId
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?   @db.ObjectId
}

model Category {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  nameCate String
  posts    Post[]
}

model Type {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  posts Post[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}
